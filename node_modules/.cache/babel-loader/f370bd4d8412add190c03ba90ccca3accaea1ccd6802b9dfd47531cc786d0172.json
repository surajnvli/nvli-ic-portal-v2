{"ast":null,"code":"var _jsxFileName = \"/var/www/html/ic-portal-new/src/Archivecontext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useContext, useEffect } from 'react';\nimport { useCallback } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst url = 'https://indianculture.nvli.in/rest/archive';\nconst AppContext = /*#__PURE__*/React.createContext();\nconst AppProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [loading, setLoading] = useState(true);\n  const [searchTerm, setSearchTerm] = useState('a');\n  const [archives, setArchives] = useState([]);\n  const fetchArchives = useCallback(async () => {\n    setLoading(true);\n    try {\n      const response = await fetch(`${url}`);\n      const data = await response.json();\n      const {\n        search_results\n      } = data;\n      if (search_results) {\n        const newArchives = search_results.map(item => {\n          const {\n            nid,\n            title,\n            field_pdf_digital_file,\n            field_dc_type,\n            field_dc_date_issued\n          } = item;\n          return {\n            id: nid,\n            name: title,\n            pdffile: field_pdf_digital_file,\n            type: field_dc_type,\n            issuedate: field_dc_date_issued\n          };\n        });\n        setArchives(newArchives);\n      } else {\n        setArchives([]);\n      }\n      setLoading(false);\n    } catch (error) {\n      console.log(error);\n      setLoading(false);\n    }\n  }, [searchTerm]);\n  useEffect(() => {\n    fetchArchives();\n  }, [searchTerm, fetchArchives]);\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: {\n      loading,\n      archives,\n      setSearchTerm\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n// make sure use\n_s(AppProvider, \"FHyKshOmwKUzUU4KszVtFTWI8VM=\");\n_c = AppProvider;\nexport const useGlobalContext = () => {\n  _s2();\n  return useContext(AppContext);\n};\n_s2(useGlobalContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport { AppContext, AppProvider };\nvar _c;\n$RefreshReg$(_c, \"AppProvider\");","map":{"version":3,"names":["React","useState","useContext","useEffect","useCallback","url","AppContext","createContext","AppProvider","children","loading","setLoading","searchTerm","setSearchTerm","archives","setArchives","fetchArchives","response","fetch","data","json","search_results","newArchives","map","item","nid","title","field_pdf_digital_file","field_dc_type","field_dc_date_issued","id","name","pdffile","type","issuedate","error","console","log","useGlobalContext"],"sources":["/var/www/html/ic-portal-new/src/Archivecontext.js"],"sourcesContent":["import React, { useState, useContext, useEffect } from 'react'\nimport { useCallback } from 'react'\n\nconst url = 'https://indianculture.nvli.in/rest/archive'\nconst AppContext = React.createContext()\n\nconst AppProvider = ({ children }) => {\n  const [loading, setLoading] = useState(true)\n  const [searchTerm, setSearchTerm] = useState('a')\n  const [archives, setArchives] = useState([])\n\n  const fetchArchives = useCallback(async () => {\n    setLoading(true)\n    try {\n      const response = await fetch(`${url}`)\n      const data = await response.json()\n      const { search_results } = data\n      if (search_results) {\n        const newArchives = search_results.map((item) => {\n          const { nid, title, field_pdf_digital_file, field_dc_type, field_dc_date_issued } =\n            item\n          return {\n            id: nid,\n            name: title,\n            pdffile: field_pdf_digital_file,\n            type: field_dc_type,\n            issuedate: field_dc_date_issued,\n          }\n        })\n        setArchives(newArchives)\n      } else {\n        setArchives([])\n      }\n      setLoading(false)\n    } catch (error) {\n      console.log(error)\n      setLoading(false)\n    }\n  }, [searchTerm])\n\n  useEffect(() => {\n    fetchArchives()\n  }, [searchTerm, fetchArchives])\n\n  return (\n    <AppContext.Provider\n      value={{\n        loading,\n        archives,\n        setSearchTerm,\n      }}\n    >\n      {children}\n    </AppContext.Provider>\n  )\n}\n// make sure use\nexport const useGlobalContext = () => {\n  return useContext(AppContext)\n}\n\nexport { AppContext, AppProvider }\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;AAC9D,SAASC,WAAW,QAAQ,OAAO;AAAA;AAEnC,MAAMC,GAAG,GAAG,4CAA4C;AACxD,MAAMC,UAAU,gBAAGN,KAAK,CAACO,aAAa,EAAE;AAExC,MAAMC,WAAW,GAAG,QAAkB;EAAA;EAAA,IAAjB;IAAEC;EAAS,CAAC;EAC/B,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACW,UAAU,EAAEC,aAAa,CAAC,GAAGZ,QAAQ,CAAC,GAAG,CAAC;EACjD,MAAM,CAACa,QAAQ,EAAEC,WAAW,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAE5C,MAAMe,aAAa,GAAGZ,WAAW,CAAC,YAAY;IAC5CO,UAAU,CAAC,IAAI,CAAC;IAChB,IAAI;MACF,MAAMM,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEb,GAAI,EAAC,CAAC;MACtC,MAAMc,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,EAAE;MAClC,MAAM;QAAEC;MAAe,CAAC,GAAGF,IAAI;MAC/B,IAAIE,cAAc,EAAE;QAClB,MAAMC,WAAW,GAAGD,cAAc,CAACE,GAAG,CAAEC,IAAI,IAAK;UAC/C,MAAM;YAAEC,GAAG;YAAEC,KAAK;YAAEC,sBAAsB;YAAEC,aAAa;YAAEC;UAAqB,CAAC,GAC/EL,IAAI;UACN,OAAO;YACLM,EAAE,EAAEL,GAAG;YACPM,IAAI,EAAEL,KAAK;YACXM,OAAO,EAAEL,sBAAsB;YAC/BM,IAAI,EAAEL,aAAa;YACnBM,SAAS,EAAEL;UACb,CAAC;QACH,CAAC,CAAC;QACFd,WAAW,CAACO,WAAW,CAAC;MAC1B,CAAC,MAAM;QACLP,WAAW,CAAC,EAAE,CAAC;MACjB;MACAJ,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC,CAAC,OAAOwB,KAAK,EAAE;MACdC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;MAClBxB,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC,EAAE,CAACC,UAAU,CAAC,CAAC;EAEhBT,SAAS,CAAC,MAAM;IACda,aAAa,EAAE;EACjB,CAAC,EAAE,CAACJ,UAAU,EAAEI,aAAa,CAAC,CAAC;EAE/B,oBACE,QAAC,UAAU,CAAC,QAAQ;IAClB,KAAK,EAAE;MACLN,OAAO;MACPI,QAAQ;MACRD;IACF,CAAE;IAAA,UAEDJ;EAAQ;IAAA;IAAA;IAAA;EAAA,QACW;AAE1B,CAAC;AACD;AAAA,GAlDMD,WAAW;AAAA,KAAXA,WAAW;AAmDjB,OAAO,MAAM8B,gBAAgB,GAAG,MAAM;EAAA;EACpC,OAAOpC,UAAU,CAACI,UAAU,CAAC;AAC/B,CAAC;AAAA,IAFYgC,gBAAgB;AAI7B,SAAShC,UAAU,EAAEE,WAAW;AAAE;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}